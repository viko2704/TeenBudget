const express = require("express");
const mysql = require("mysql2");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const nodemailer = require("nodemailer");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const db = require("./database");

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());
require("dotenv").config();

const whitelist = ["http://localhost:5174"];
const corsOptions = {
  origin: function (origin, callback) {
    if (whitelist.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true,
  optionSuccessStatus: 200
};

app.use(cors(corsOptions));

let verificationCodes = {};

// Create a transporter object using SMTP transport
const transporter = nodemailer.createTransport({
  service: "gmail", // or any other email service
  host: "smtp.gmail.com",
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER, // Your email address
    pass: process.env.EMAIL_PASS // Your email password
  },
  debug: true
});

// Signup Route
app.post("/signup", (req, res) => {
  const { firstName, lastName, email, password } = req.body;

  db.checkEmailExists(email, (err, results) => {
    if (err) return res.status(500).json({ error: "Database query error" });

    if (results.length > 0) {
      return res
        .status(400)
        .json({ error: "–ü—Ä–æ—Ñ–∏–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞." });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
    const verificationCode = crypto.randomInt(100000, 999999).toString();

    // –°—ä—Ö—Ä–∞–Ω—è–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–æ–¥–∞
    verificationCodes[email] = {
      code: verificationCode,
      firstName,
      lastName,
      password, // Store the password temporarily
      expiresAt: Date.now() + 15 * 60 * 1000 // –ó–∞–¥–∞–≤–∞ 15 –º–∏–Ω—É—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
    };

    // –ò–∑–ø—Ä–∞—â–∞ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "–®–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ò–ú–ï_–ù–ê_–ü–†–û–ï–ö–¢–ê",
      html: `
      <div style="text-align: center; background-color: rgba(244, 211, 139, 0.5); margin: 2% 3%; padding: 3% 1%; border: 4px dotted rgb(178, 50, 0); border-radius: 20px">
        <h2>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∏ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –≤ <span style="color: rgb(178, 50, 0); font-weight: 600;">üïÆ</span>–ò–ú–ï_–ù–ê_–ü–†–û–ï–ö–¢–ê<span style="color: rgb(178, 50, 0); font-weight: 600;">üïÆ</span></h2>
          <hr style="border: 0.5px solid rgb(178, 50, 0); width: 18%; margin-top: 6%; margin-bottom: 4%"></hr>
        <p>–í–∞—à–∏—è—Ç —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –µ <strong style="font-size: 20px; color: rgb(178, 50, 0)">${verificationCode}</strong>.</p>
      </div>
      <div>
        <p style="border-radius: 5px; background-color: rgba(178, 50, 0, 0.2); text-align: center; font-size: 13px; margin: 5% 25% 0% 25%">–ù–µ —Å—Ç–µ –ø–æ–∏—Å–∫–∞–ª–∏ –∫–æ–¥? –ò–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª.</p>
      </div>`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error)
        return res
          .status(500)
          .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª! :(" });
      res.json({ message: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!" });
    });
  });
});

// Resend Route
app.post("/resend", (req, res) => {
  const { email } = req.body;

  // –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
  const verificationCode = crypto.randomInt(100000, 999999).toString();

  // –°—ä—Ö—Ä–∞–Ω—è–≤–∞ –∫–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
  verificationCodes[email] = {
    ...verificationCodes[email],
    code: verificationCode,
    expiresAt: Date.now() + 15 * 60 * 1000 // –ó–∞–¥–∞–≤–∞ 15 –º–∏–Ω—É—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
  };

  // –ò–∑–ø—Ä–∞—â–∞ –Ω–æ–≤ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: "–ù–æ–≤ —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ò–ú–ï_–ù–ê_–ü–†–û–ï–ö–¢–ê",
    html: `
      <div style="text-align: center; background-color: rgba(244, 211, 139, 0.5); margin: 2% 3%; padding: 3% 1%; border: 4px dotted rgb(178, 50, 0); border-radius: 20px">
        <p>–í–∞—à–∏—è—Ç —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –µ <strong style="font-size: 20px; color: rgb(178, 50, 0)">${verificationCode}</strong>.</p>
      </div>
      <div>
        <p style="border-radius: 5px; background-color: rgba(178, 50, 0, 0.2); text-align: center; font-size: 13px; margin: 5% 25% 0% 25%">–ù–µ —Å—Ç–µ –ø–æ–∏—Å–∫–∞–ª–∏ –∫–æ–¥? –ò–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª.</p>
      </div>`
  };

  console.log(verificationCodes[email]);
  transporter.sendMail(mailOptions, (error, info) => {
    if (error)
      return res
        .status(500)
        .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª! :(" });
    res.json({ message: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!" });
  });
});

// Verification Route
app.post("/verify-email", (req, res) => {
  const { email, verificationCode } = req.body;

  const storedData = verificationCodes[email];
  if (!storedData) {
    return res
      .status(400)
      .json({ error: "–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ —Ç–æ–∑–∏ –∏–º–µ–π–ª." });
  }

  if (Date.now() > storedData.expiresAt) {
    delete verificationCodes[email];
    return res.status(400).json({ error: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑—Ç–µ–∫—ä–ª." });
  }

  if (storedData.code !== verificationCode) {
    return res.status(400).json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ." });
  }

  // Proceed with user registration
  const salt = bcrypt.genSaltSync(10);
  const hashedPassword = bcrypt.hashSync(storedData.password, salt);

  db.createUser(
    storedData.firstName,
    storedData.lastName,
    email,
    hashedPassword,
    (err, result) => {
      if (err) return res.status(400).json({ error: err.message });

      // –ò–∑—Ç—Ä–∏–≤–∞ –∫–æ–¥–∞ —Å–ª–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      delete verificationCodes[email];
      res.json({ message: "–£—Å–ø–µ—à–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª!" });
    }
  );
});

// Sign in Route
app.post("/signin", (req, res) => {
  const { email, password, rememberMe } = req.body;

  db.findUserByEmail(email, (err, results) => {
    if (err) return res.status(400).json({ error: err.message });
    if (results.length === 0)
      return res
        .status(400)
        .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

    const user = results[0];
    const isMatch = bcrypt.compareSync(password, user.password);
    if (!isMatch)
      return res
        .status(400)
        .json({ error: "–í—ä–≤–µ–¥–µ–Ω–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –µ –≥—Ä–µ—à–Ω–∞ –∏–ª–∏ –Ω–µ–ø—ä–ª–Ω–∞!" });

    const token = jwt.sign({ id: user.id }, process.env.SECRET_KEY, {
      expiresIn: rememberMe ? "7d" : "1h"
    });
    res.json({ message: "–£—Å–ø–µ—à–Ω–æ –≤–ª–∏–∑–∞–Ω–µ!", token });
  });
});

// Password Reset Request Route
app.post("/password-reset-request", (req, res) => {
  const { email } = req.body;

  db.findUserByEmail(email, (err, results) => {
    if (err) return res.status(400).json({ error: err.message });
    if (results.length === 0)
      return res
        .status(400)
        .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

    const user = results[0];
    const token = jwt.sign({ id: user.id }, process.env.SECRET_KEY, {
      expiresIn: "15m"
    });

    // Create a reset link
    const resetLink = `http://localhost:5174/resetpassword/resetcover/${token}`;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –∑–∞ –ò–ú–ï_–ù–ê_–ü–†–û–ï–ö–¢–ê",
      html: `<p>–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ <a href="${resetLink}">—Ç—É–∫</a>, –∑–∞ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞ —Å–∏.</p>`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error)
        return res
          .status(500)
          .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª :(" });
      res.json({
        message: "–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞ –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!"
      });
    });
  });
});

// Password Reset Route
app.post("/password-reset", (req, res) => {
  const { token, newPassword } = req.body;

  jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {
    if (err) return res.status(400).json({ error: "Invalid or expired token" });

    const userId = decoded.id;

    // Hash the new password
    const salt = bcrypt.genSaltSync(10);
    const hashedPassword = bcrypt.hashSync(newPassword, salt);

    db.updateUserPassword(userId, hashedPassword, (err, result) => {
      if (err) return res.status(400).json({ error: err.message });
      res.json({ message: "–£—Å–ø–µ—à–Ω–æ –Ω—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞!" });
    });
  });
});

// Token Validation Route
app.post("/token-validation", (req, res) => {
  const { token } = req.body;

  jwt.verify(token, process.env.SECRET_KEY, (err) => {
    if (err) return res.json({ valid: false });
    res.json({ valid: true });
  });
});

// Get user data route
app.get("/user-data", (req, res) => {
  const token = req.headers.authorization?.split(" ")[1]; // Extract token from Authorization header

  if (!token) {
    return res.status(401).json({ error: "Token not provided" });
  }

  jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });

    const userId = decoded.id;

    db.getUserById(userId, (err, results) => {
      if (err) return res.status(500).json({ error: "Database query error" });
      if (results.length === 0)
        return res
          .status(404)
          .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

      const user = results[0];
      res.json(user);
    });
  });
});
// Start server
app.listen(5000, () => {
  console.log("Server started on http://localhost:5000");
});
